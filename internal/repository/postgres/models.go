// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package postgres

import (
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

type Heading struct {
	ID        string             `db:"id"`
	Title     string             `db:"title"`
	ListID    string             `db:"list_id"`
	UserID    string             `db:"user_id"`
	IsDefault bool               `db:"is_default"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
}

type List struct {
	ID        string             `db:"id"`
	Title     string             `db:"title"`
	UserID    string             `db:"user_id"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
}

type RefreshSession struct {
	ID           int32              `db:"id"`
	UserID       pgtype.Text        `db:"user_id"`
	DeviceID     string             `db:"device_id"`
	RefreshToken string             `db:"refresh_token"`
	LastVisitAt  pgtype.Timestamptz `db:"last_visit_at"`
	ExpiresAt    pgtype.Timestamptz `db:"expires_at"`
}

type Reminder struct {
	ID        string             `db:"id"`
	Content   string             `db:"content"`
	Read      bool               `db:"read"`
	TaskID    string             `db:"task_id"`
	UserID    string             `db:"user_id"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
}

type ReminderSetting struct {
	ID       int32  `db:"id"`
	Interval string `db:"interval"`
}

type Status struct {
	ID         int32  `db:"id"`
	StatusName string `db:"status_name"`
}

type Tag struct {
	ID        string             `db:"id"`
	Title     string             `db:"title"`
	UserID    string             `db:"user_id"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
}

type Task struct {
	ID          string             `db:"id"`
	Title       string             `db:"title"`
	Description pgtype.Text        `db:"description"`
	StartDate   pgtype.Timestamptz `db:"start_date"`
	Deadline    pgtype.Timestamptz `db:"deadline"`
	StartTime   sql.NullTime       `db:"start_time"`
	EndTime     sql.NullTime       `db:"end_time"`
	StatusID    int32              `db:"status_id"`
	ListID      string             `db:"list_id"`
	HeadingID   pgtype.Text        `db:"heading_id"`
	UserID      string             `db:"user_id"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at"`
	DeletedAt   pgtype.Timestamptz `db:"deleted_at"`
}

type TasksTag struct {
	TaskID string `db:"task_id"`
	TagID  string `db:"tag_id"`
}

type User struct {
	ID           string             `db:"id"`
	Email        string             `db:"email"`
	PasswordHash string             `db:"password_hash"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at"`
	DeletedAt    pgtype.Timestamptz `db:"deleted_at"`
}

type UserDevice struct {
	ID            string             `db:"id"`
	UserID        string             `db:"user_id"`
	UserAgent     string             `db:"user_agent"`
	Ip            string             `db:"ip"`
	Detached      bool               `db:"detached"`
	LatestLoginAt pgtype.Timestamptz `db:"latest_login_at"`
	DetachedAt    pgtype.Timestamptz `db:"detached_at"`
}
