// Code generated by mockery v2.40.1. DO NOT EDIT.

package storage

import (
	context "context"

	model "github.com/rshelekhov/reframed/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// UserStorage is an autogenerated mock type for the UserStorage type
type UserStorage struct {
	mock.Mock
}

type UserStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *UserStorage) EXPECT() *UserStorage_Expecter {
	return &UserStorage_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserStorage) CreateUser(ctx context.Context, user model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserStorage_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserStorage_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user model.User
func (_e *UserStorage_Expecter) CreateUser(ctx interface{}, user interface{}) *UserStorage_CreateUser_Call {
	return &UserStorage_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserStorage_CreateUser_Call) Run(run func(ctx context.Context, user model.User)) *UserStorage_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *UserStorage_CreateUser_Call) Return(_a0 error) *UserStorage_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserStorage_CreateUser_Call) RunAndReturn(run func(context.Context, model.User) error) *UserStorage_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UserStorage) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserStorage_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserStorage_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserStorage_Expecter) DeleteUser(ctx interface{}, id interface{}) *UserStorage_DeleteUser_Call {
	return &UserStorage_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *UserStorage_DeleteUser_Call) Run(run func(ctx context.Context, id string)) *UserStorage_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserStorage_DeleteUser_Call) Return(_a0 error) *UserStorage_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserStorage_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *UserStorage_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserStorage) GetUserByID(ctx context.Context, id string) (model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStorage_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserStorage_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserStorage_Expecter) GetUserByID(ctx interface{}, id interface{}) *UserStorage_GetUserByID_Call {
	return &UserStorage_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *UserStorage_GetUserByID_Call) Run(run func(ctx context.Context, id string)) *UserStorage_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserStorage_GetUserByID_Call) Return(_a0 model.User, _a1 error) *UserStorage_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStorage_GetUserByID_Call) RunAndReturn(run func(context.Context, string) (model.User, error)) *UserStorage_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, pgn
func (_m *UserStorage) GetUsers(ctx context.Context, pgn model.Pagination) ([]model.User, error) {
	ret := _m.Called(ctx, pgn)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Pagination) ([]model.User, error)); ok {
		return rf(ctx, pgn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Pagination) []model.User); ok {
		r0 = rf(ctx, pgn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Pagination) error); ok {
		r1 = rf(ctx, pgn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStorage_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type UserStorage_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - pgn model.Pagination
func (_e *UserStorage_Expecter) GetUsers(ctx interface{}, pgn interface{}) *UserStorage_GetUsers_Call {
	return &UserStorage_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, pgn)}
}

func (_c *UserStorage_GetUsers_Call) Run(run func(ctx context.Context, pgn model.Pagination)) *UserStorage_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Pagination))
	})
	return _c
}

func (_c *UserStorage_GetUsers_Call) Return(_a0 []model.User, _a1 error) *UserStorage_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStorage_GetUsers_Call) RunAndReturn(run func(context.Context, model.Pagination) ([]model.User, error)) *UserStorage_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserStorage) UpdateUser(ctx context.Context, user model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserStorage_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserStorage_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user model.User
func (_e *UserStorage_Expecter) UpdateUser(ctx interface{}, user interface{}) *UserStorage_UpdateUser_Call {
	return &UserStorage_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *UserStorage_UpdateUser_Call) Run(run func(ctx context.Context, user model.User)) *UserStorage_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *UserStorage_UpdateUser_Call) Return(_a0 error) *UserStorage_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserStorage_UpdateUser_Call) RunAndReturn(run func(context.Context, model.User) error) *UserStorage_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserStorage creates a new instance of UserStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStorage {
	mock := &UserStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
